<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淞小菜同学🐿</title>
  
  
  <link href="https://www.fomal.cc/atom.xml" rel="self"/>
  
  <link href="https://www.fomal.cc/"/>
  <updated>2023-12-23T14:25:07.323Z</updated>
  <id>https://www.fomal.cc/</id>
  
  <author>
    <name>淞小菜同学🐿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 快速入门</title>
    <link href="https://www.fomal.cc/posts/61aa4cfb.html"/>
    <id>https://www.fomal.cc/posts/61aa4cfb.html</id>
    <published>2023-12-23T14:25:07.323Z</published>
    <updated>2023-12-23T14:25:07.323Z</updated>
    
    <content type="html"><![CDATA[<h1>React 快速入门</h1><p>参考：</p><p>视频：<a href="https://www.bilibili.com/video/BV1tY411G7UP">https://www.bilibili.com/video/BV1tY411G7UP</a></p><p>笔记：<a href="http://codesohigh.com/">http://codesohigh.com/</a></p><p>假设已经有了其他框架的基础（比如 Vue）。</p><p>在学习 React 时会看到小程序的一些影子；Vue3 也参照了 React。可以说，React 一直走在各个框架的前沿，是标杆级别的存在。</p><h2 id="准备工作">准备工作</h2><p>Vscode</p><ul><li><p>插件 react：快速生成 jsx 页面的基本结构</p><ul><li>输入 rcc（React Class Component），生成 React 类组件</li><li>输入 rfc（React Function Component），生成 React 函数式组件</li></ul></li><li><p>需要配置输入 tab 自动在 jsx 页面中补全 html 标签</p></li></ul><h2 id="初始化项目">初始化项目</h2><p>通过脚手架构建项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo 是项目名称</span></span><br><span class="line">npx create-react-app demo</span><br></pre></td></tr></table></figure><blockquote><p>npx：一次性安装，命令执行完后，安装的依赖就删除了</p></blockquote><p>安装完之后，使用集成开发环境打开（VsCode、WebStorm… 都行）该文件夹，查看 <code>package.json</code> 中的 <code>scripts</code>，查看有哪些可运行的脚本</p><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start 是脚本的名称，run 可省略</span></span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>项目默认在 <code>http://localhost:3000</code> 运行，打开浏览器，看到转动的 React 图标，大功告成！</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20221224163244093.png" alt="image-20221224163244093" style="zoom: 33%;" /><h2 id="入口文件">入口文件</h2><p>初始化文件结构：</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20221224203934668.png" alt="image-20221224203934668" style="zoom:67%;" /><p>删除 <code>src</code> 下的所有文件，保留 <code>index.js</code> ，对其进行修改，如下：</p><p>这是 React18 版本前的写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello, World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>此时，页面会出现 <code>Hello, World</code>，但是控制台可能会报错</p><p>React18 版本写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello, World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="组件化开发">组件化开发</h2><p>实际开发过程中，不可能只有一个 <code>h2</code> 标签，如果把代码都写到入口文件中，显然是不妥的。</p><p>在 <code>src</code> 下新建一个文件：<code>App.tsx</code> ，学过 Vue 的应该知道，这是一个最大的组件。（关于 tsx 后缀，后面会提到）</p><h3 id="类组件">类组件</h3><p>类组件基于 es6 的 class 关键字。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入的 React 对象中有很多的属性和方法，以后都可能会用到</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;hello, world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 语法，定义一个类，类名一般和文件名保持一致</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 生命周期函数，return 的内容表示要渲染的内容，任何一个组件都必须要有 render 函数</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用圆括号，可以在 js 中嵌套 html</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 使用花括号，可以在 html 中嵌套 js */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>在 <code>index.js</code> 中使用该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="comment">// 使用</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>回到浏览器看看效果吧~</p><h3 id="函数式组件">函数式组件</h3><p>见 <a href="#jump1">函数式组件</a></p><h2 id="JSX-语法">JSX 语法</h2><ul><li><p>使用圆括号 <code>()</code>，可以在 js 中嵌套 html</p></li><li><p>使用花括号 <code>&#123;&#125;</code>，可以在 html 中嵌套 js （变量）。<strong>不是双花括号，这不是 Vue 哦</strong></p></li></ul><ol><li><p>for =&gt; htmlFor</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* label 用来聚焦，当点击 “用户名：” 时，输入框会获取焦点 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 原始写法，使用 for，会报错 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* jsx 写法，使用 htmlFor */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 js 语法中，for 其实是用来写 for 循环的，所以会出现冲突报错</p></li></ol><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20221224213858597.png" alt="image-20221224213858597" style="zoom: 80%;" /><p>​</p><ol start="2"><li><p>class =&gt; className</p><p>在 js 语法中，class 用来定义一个类（ES6），所以会出现冲突报错</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 原始写法，使用 class，会报错 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>html 标签中的属性，不能使用引号，要使用单花括号，表示要写 js 变量了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125;&gt;累加&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>双花括号</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 原始写法 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background: blue;&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 注意使用驼峰代替短横线，属性值使用引号引起来 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> &#x27;<span class="attr">blue</span>&#x27; &#125;&#125;&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原始写法会报错，style 的值不能是一个字符串，因为在 js 中引号引起来表示这是一个字符串</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20221224220605622.png" alt="image-20221224220605622"></p><p>其实，不是平白无故突然冒出来一个双花括号的，可以理解为单花括号中是一个对象（样式对象）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">// 一个对象</span></span><br><span class="line"><span class="keyword">const</span> myStyle = &#123; <span class="attr">backgroundColor</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="attr">textAlign</span>: <span class="string">&#x27;center&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;myStyle&#125;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文件名可以是 jsx 或者 js，不影响文件中的代码（<strong>我们这里约定，jsx 用来表示这是一个组件，里面可能写了一些 html；js 后缀就纯粹写 js 代码</strong>）</p></li><li><p>组件名称必须大写，否则控制台会报错</p></li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20221224210824673.png" alt="image-20221224210824673"></p><h2 id="根标签">根标签</h2><p>render() 的 return 值要有一个根标签，否则页面会报错</p><p>我们首先想到的是 <code>div</code> ，但是会平白无故多出一个 <code>div</code> 标签。react 提供了一种解决方案</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> <span class="attr">flag</span> ? &#x27;<span class="attr">skyblue</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">pink</span>&#x27;&#125;&#125;&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for循环">for循环</h2><p>在 react 中，for 循环只能使用 map，不能使用 forEach。因为我们需要 for 循环的返回值来作为页面的内容，而只有 map 才有返回值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;刘备&#x27;</span>, <span class="string">&#x27;关羽&#x27;</span>, <span class="string">&#x27;张飞&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在 js 中写 html，用圆括号</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 在 html 中写js，用单花括号 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            arr.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">              // 在 js 中写 html，用圆括号</span></span><br><span class="line"><span class="language-xml">              // return (</span></span><br><span class="line"><span class="language-xml">              //   <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              // )</span></span><br><span class="line"><span class="language-xml">              // 简写</span></span><br><span class="line"><span class="language-xml">              return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">            // 简写</span></span><br><span class="line"><span class="language-xml">            // arr.map((item, index) =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>花括号必须写，圆括号可写可不写，jsx 会识别出来</p><h2 id="setState-和累加">setState()和累加</h2><h3 id="累加案例">累加案例</h3><p>每个变量修改，都要更新到视图吗？这样性能不高。</p><p>以下写法可以实现累加，但是页面并出现累加的效果（不会重新渲染），因为 num 的变化没有被监听到。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>数字为：&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          num++;</span></span><br><span class="line"><span class="language-xml">          console.log(num);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style='font-weight: bold; color: red;'>当数据发生修改时，如何触发视图更新呢？</span>通过 <code>setState()</code></p><p>首先将数据的定义放到 state 对象中。</p><p>数据的获取通过  <code>this.state.xxx</code></p><p>数据的修改通过  <code>this.setState()</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"><span class="comment">/* 完整写法</span></span><br><span class="line"><span class="comment">  constructor(props) &#123;</span></span><br><span class="line"><span class="comment">    super(props);</span></span><br><span class="line"><span class="comment">    this.state = &#123;</span></span><br><span class="line"><span class="comment">      num: 1</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>数字为：&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 为什么不是 this.state.num++ ？ */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 我们修改是通过 setState 来修改，this.state.num++ 相当于直接修改 num，再通过 setState 赋值给 num */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 不建议直接修改，建议通过 setState 来修改 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; this.setState(&#123; num: this.state.num + 1 &#125;) &#125;&#125;&gt;累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setState-的几种写法">setState()的几种写法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相当于就是写法2，只是换个变量而已，有人会这么写</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addNum3</span> = <span class="variable language_">this</span>.<span class="property">addNum1</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>数字为：&#123;this.state.num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 写法1：适合代码简短 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; this.setState(&#123; num: this.state.num + 1 &#125;) &#125;&#125;&gt;累加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 写法2 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addNum1&#125;</span>&gt;</span>累加2 调用普通函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addNum1.bind(this)&#125;</span>&gt;</span>累加2 调用普通函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 写法3 使用箭头函数规避 this 的指向问题 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addNum2&#125;</span>&gt;</span>累加3 直接调用箭头函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.addNum1()&#125;&gt;累加3 箭头函数中调用普通函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#123;/* 这里，addNum1 后面要加括号，因为箭头函数内部调用的 addNum1 需要立即执行 */&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 写法4 本质和写法2相同 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.addNum3&#125;</span>&gt;</span>写法3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  <span class="title function_">addNum1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this);// undefined，需要使用 bind 修改 this 的指向</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  addNum2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// App3，当前类</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数传参">函数传参</h2><p>点击按钮 1，就打印出 1，点击按钮 2，就打印出 2，用同一个函数来实现</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App4</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.btnClick(1)&#125;&gt;按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.btnClick(2)&#125;&gt;按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">btnClick</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsx-文件中引入-css-样式">jsx 文件中引入 css 样式</h2><p>直接写</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App4</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;background:</span> &#x27;<span class="attr">pink</span>&#x27;, <span class="attr">width:</span> &#x27;<span class="attr">100px</span>&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100px</span>&#x27;&#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入样式</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App4.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App4</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;box&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="span-id-jump1-函数式组件-span"><span id="jump1">函数式组件</span></h2><p>函数式组件基于构造函数。</p><p>箭头函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      hello</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>普通函数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      hello</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h4 id="函数式组件的特点">函数式组件的特点</h4><ol><li>函数式组件没有生命周期</li><li>函数式组件没有 this</li><li>函数式组件没有 state 状态（<a href="http://this.state.xxx">this.state.xxx</a> ，this 都没有，哪来的 state？）</li></ol><p>起初，类组件和函数式组件是同时存在的，但是由于函数式组件没有生命周期、this、state，啥都用不了，导致使用它的开发者很少。直到 hooks 的出现，函数式组件变的极其灵活，而且十分简洁。</p><h2 id="组件传参">组件传参</h2><h3 id="父传子">父传子</h3><p>把 num 参数的值传递到 Child 组件中</p><p>App3 =&gt; Father =&gt; Child</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>num = &#123;props.num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">num</span>=<span class="string">&#123;props.num&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> <span class="attr">num</span>=<span class="string">&#123;456&#125;</span> /&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子传父">子传父</h3><p>无论是 vue，小程序还是 react，所谓的子传父，真实在干活的是父组件。</p><p>子传父的前提是要父传子，即父组件传递给子组件一个用来修改对应数据的函数，相当于子组件调用了父组件的方法来修改值**（儿子改不了爸爸，只能通知爸爸，让爸爸自己修改自己）**</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>num = &#123;props.num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> props.changeNum(props.num + 1)&#125;&gt;修改父组件的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">num</span>=<span class="string">&#123;props.num&#125;</span> <span class="attr">changeNum</span>=<span class="string">&#123;props.changeNum&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">changeNum</span> = (<span class="params">newNum</span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setNum</span>(newNum)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 也可以直接传 setNum 函数</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Father</span> <span class="attr">num</span>=<span class="string">&#123;num&#125;</span> <span class="attr">changeNum</span>=<span class="string">&#123;changeNum&#125;</span> /&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="span-id-jump3-任意组件传值-span"><span id='jump3'>任意组件传值</span></h3><p>在子传父的例子中，如何直接从顶级组件 App 将参数<strong>直接传递到</strong> Child 组件？（跨过 Father 组件）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 createContext</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建上下文空间，名称随意</span></span><br><span class="line"><span class="comment">// 一旦创建了上下文空间，就会有两个东西：Provider，Consumer</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NumContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App4</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 1. Provider 是一对标签，通过 value 属性来提供数据</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">NumContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">num</span>, <span class="attr">setNum</span> &#125;&#125;&gt;</span> &#123;/* 如果是传多个参数，需要再加一个花括号，变成对象形式 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Father</span> /&gt;</span> &#123;/* 将 组件放在 Provider 标签中才能共享数据 */&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;/* <span class="tag">&lt;<span class="name">Child</span> /&gt;</span> 直接传递给 Child 组件也是可以的 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">NumContext.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通函数形式的组件</span></span><br><span class="line"><span class="comment">// function Father() &#123;</span></span><br><span class="line"><span class="comment">//     return &lt;Child /&gt;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数形式的组件，只有一行</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="comment">// 圆括号表示要在 js 中写 html</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">NumContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123; // 花括号表示 要在 html 中写 js</span></span><br><span class="line"><span class="language-xml">                (&#123; num, setNum &#125;) =&gt; &#123; // 如果要接收多个参数，需要进行解构</span></span><br><span class="line"><span class="language-xml">                    return ( // 圆括号表示要在 js 中写 html</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/<span class="title class_">NumContext</span>.<span class="property">Consumer</span>&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现，使用 createContext 之后，Child 组件的代码嵌套的层级很多，一旦多起来就容易乱。可以使用 <a href="#jump2">useContext</a> 这个 Hook 来代替。</p><h2 id="React-Hooks">React Hooks</h2><p>React 官方定义的 Hook</p><p>开发人员自定义的 Hook</p><p><span style='font-weight: bold; color: red;'>Hook 只能用在组件函数中的最顶层！</span></p><h3 id="useState">useState</h3><p>useState 是一个生命周期函数，既然是函数，就有返回值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在控制台看看，useState 是什么</span></span><br><span class="line"><span class="keyword">const</span> xxx = <span class="title function_">useState</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xxx); <span class="comment">// [undefined, ƒ]</span></span><br></pre></td></tr></table></figure><p>可以看到，useState 返回的是一个数组，这个数组有两个参数。</p><p>第一个参数 <code>undefined</code> 是我们要传入的参数，第二个参数 <code>f</code> 是一个函数，用来修改参数的值</p><p>案例：</p><p>当点击按钮的时候，修改页面显示的数据，并更新视图</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let msg = &#x27;hello, world&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Hook 只能用在组件函数中的最顶层</span></span><br><span class="line">    <span class="keyword">let</span> [msg, setMsg] = <span class="title function_">useState</span>(<span class="string">&#x27;hello, world&#x27;</span>);<span class="comment">// &#x27;hello, world&#x27; 是 msg 的初始值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// const fn1 = () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     msg = &#x27;song&#x27;</span></span><br><span class="line">    <span class="comment">//     console.log(msg);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;msg&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;fn1&#125;</span>&gt;</span>修改 msg，但无法更新视图<span class="tag">&lt;/<span class="name">button</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setMsg(&#x27;song&#x27;)&#125;&gt;修改 msg<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useEffect">useEffect</h3><p>react 的函数式组件没有生命周期，即不像类组件那样有 mounted（页面挂载后请求数据）、updated（监测数据更新）、beforeDestroyed（一般在这个阶段处理脏数据、垃圾回收，如数据恢复为原始值，删除变量） 等过程。</p><p>但是我们可以使用 useEffect 来模拟这几个生命周期。</p><p>如何模拟一个销毁过程？比如过 3 秒，把挂载的组件替换成别的组件，那么原先的组件就是被销毁了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 模拟一个销毁过程</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    root.<span class="title function_">render</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span>/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>模拟生命周期</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [num1, setNum1] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> [num2, setNum2] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟 mounted，在这个位置写 ajax</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;挂载完毕~~&#x27;</span>);</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟 updated，监测数据更新</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;num1 更新了~~&#x27;</span>);</span><br><span class="line">    &#125;, [num1])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 useEffect 没有第二个参数，所有数据更新都会触发回调函数</span></span><br><span class="line">    <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;所有数据更新了~~&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// 要监测页面所有数据的更新，有两个选择，将所有数据写到数组中，或者直接不要第二个数组参数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模拟 beforeDestroy</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;销毁阶段&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num1&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum1(num1 + 1)&#125;&gt;累加 num1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num2&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum2(num2 + 1)&#125;&gt;累加 num2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="span-id-jump2-useContext-span"><span id="jump2">useContext</span></h3><p>完整代码：<a href="#jump3">任意组件传值</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 需要指明使用的是哪一个上下文对象，此处是 NumContext</span></span><br><span class="line">    <span class="keyword">const</span> &#123; num, setNum &#125; = <span class="title function_">useContext</span>(<span class="title class_">NumContext</span>); <span class="comment">// 解构</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="memo">memo</h3><p>memory</p><p>看一个例子：</p><p>父组件中用到了子组件，当我们点击父组件中的累加按钮，就会使得 <code>num</code> 加 1，然后重新渲染页面。</p><p>但是我们注意看控制台，发现每次点击按钮，子组件也会被重新渲染。<span style='font-weight: bold; color: red;'>这会非常的消耗性能</span>。</p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20230102192839427.png" alt="image-20230102192839427" style="zoom:67%;" /><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件出现了~&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child 子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App7</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> setNum(num + 1)&#125;&gt;累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 memo，将子组件包裹起来，就可以解决这个问题。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件出现了~&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Child 子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="注意">注意</h4><p>有时候，子组件并不是简单的 HTML，可能需要实现一些功能，如：子组件中有一个按钮，通过按钮实现累加功能</p><blockquote><p>doSth 方法 和 num 是定义在父组件的，子组件只是简单的调用</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件出现了~&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child 子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 子组件中有一个按钮，通过按钮实现累加功能 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.doSth&#125;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App7</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">doSth</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setNum</span>(num + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">doSth</span>=<span class="string">&#123;doSth&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们点击按钮的时候，发现 <code>memo</code> 失效了，子组件又再次重新渲染了。这是因为：<strong><code>memo</code> 只对纯静态的子组件有效</strong>。如果子组件中有一些事件和其他功能，就会失效。这时候就要结合 <code>useCallback</code> 进行处理。</p><h3 id="useCallback">useCallback</h3><p>使用 <code>useCallback</code> 将事件套起来，配合 <code>memo</code> 可以实现组件的缓存，当我们点击子组件中的事件去修改父组件的值，同时不会触发子组件的重新渲染。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, memo, useCallback &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件出现了~&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Child 子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 子组件中有一个按钮，通过按钮实现累加功能 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.doSth&#125;</span>&gt;</span>累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App7</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. setNum(num + 1) 直接使用新值覆盖旧值</span></span><br><span class="line"><span class="comment">            在这里，num 初始值为 1，点击累加， num = 初始值 + 1 = 2，但是初始值没变，再次点击累加，还是 num = 初始值 + 1 = 2</span></span><br><span class="line"><span class="comment">        2. setNum(num =&gt; num + 1) 回调的形式，不断使用新的值覆盖旧值，如 2 覆盖 1，3 覆盖 2...覆盖的是之前修改过的旧值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        如果在下面的 doSth 中我们使用第一种方式，那么页面只会出现一次累加的效果，其实是因为 num 一直是 2（可以打印看看）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 useCallback 将 doSth 包裹起来，同时 [] 表示不检测数据的更新（类似于 useEffect）</span></span><br><span class="line">    <span class="keyword">const</span> doSth = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 此处使用函数回调的形式</span></span><br><span class="line">        <span class="title function_">setNum</span>(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">    &#125;, []) <span class="comment">// 空数组表示不检测更新，这样就不会触发子组件的重新渲染了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(num);</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;num&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Child</span> <span class="attr">doSth</span>=<span class="string">&#123;doSth&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useMemo">useMemo</h3><p>和 <code>useCallback</code> 相似，但是使用方式不一样，需要多套一层函数</p><blockquote><p>函数中返回函数：<strong>高阶函数</strong></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doSth = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 函数中返回函数：高阶函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="title function_">setNum</span>(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>对比一下  <code>useCallback</code> ：</p><p>在函数中就直接调用了<code> setNum()</code> 这个方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doSth = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此处使用函数回调的形式</span></span><br><span class="line">    <span class="title function_">setNum</span>(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>);</span><br><span class="line">&#125;, []) <span class="comment">// 空数组表示不检测更新，这样就不会触发子组件的重新渲染了</span></span><br></pre></td></tr></table></figure><h2 id="受控组件与不受控组件">受控组件与不受控组件</h2><p>受控组件和不受控组件只存在于表单元素（input、textarea…）</p><ol><li><p>受控组件：表单元素的 value 需要通过 state（useState） 来定义，受到 state 的控制</p></li><li><p>不受控组件：表单元素的 value 无法通过 state 获取，只能使用 ref (或 useRef) 来获取</p></li></ol><h3 id="1-受控组件">1. 受控组件</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20230102181633281.png" alt="image-20230102181633281"></p><p>将表单元素的 value 定义在 state 中，可以实现<strong>实现 data 变量 =&gt; 页面表单元素的值</strong>；onChange 可以<strong>实现页面表单元素的值 =&gt; data 变量</strong>，从而实现双向数据绑定。</p><h4 id="案例：">案例：</h4><p><strong>实现类似于 v-model 的效果</strong>，同时点击按钮的时候，获取 input 输入框中的值</p><ol><li>当页面元素的值发生改变的时候，会触发 <code>onChange</code></li><li><code>onChange</code> 中的事件回调中，将页面元素身上的值 set 到 value 这个变量中，实现了双向绑定</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App6</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;song&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过事件对象获取到页面元素身上的值，并 set 到 value 这个变量中，实现了双向绑定</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">inputChange</span> = e =&gt; &#123;</span><br><span class="line">        <span class="comment">// console.log(e.target.value);</span></span><br><span class="line">        <span class="title function_">setValue</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 当页面元素的值发生改变的时候，会触发 onChange */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;inputChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(value)&#125;&gt;获取 input 的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-不受控组件">2. 不受控组件</h3><p>Vue 中的 ref 和 React 是一样的，这样就可以避免使用原生 JS 操作 DOM 元素。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App6</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="title function_">useRef</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 使用 ref，将 input 和 element 变量进行绑定 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;element&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/* 可以 console.log(element) 看看里面有什么 */&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(element.current.value)&#125;&gt;获取 input 的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-Redux">React Redux</h2><p>官网：<a href="https://react-redux.js.org/">https://react-redux.js.org/</a></p><p>React Redux 是基于 Redux 的。Redux 是类似于 vuex 的状态管理工具，但是 vuex 只能用于 vue，Redux 可以用于绝大部分的框架，当然也可以用于 React。相对来说，Redux 比较不好上手，因此我们可以直接使用 React Redux。</p><p>React Redux 是基于<a href="#jump3">上下文空间 context</a> 的思想设计的</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20230106182237539.png" alt="image-20230106182237539"></p><h3 id="安装">安装</h3><p>React Redux 基于 Redux，因此安装时需要两者一起安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @reduxjs/toolkit react-redux</span><br></pre></td></tr></table></figure><h3 id="仓库创建">仓库创建</h3><p>在 src下，创建 store 目录，包含 reducer.js（<strong>创建初始状态，并导出一个函数</strong>）以及 index.js（<strong>仓库的入口文件</strong>）。</p><p>store/reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建仓库的初始状态</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="comment">// reducer 中可以创建一些默认的状态，初始数据</span></span><br><span class="line">    <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仓库的入口文件</span></span><br><span class="line"><span class="comment">// 引入 reducer</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&quot;./reducer&quot;</span>;</span><br><span class="line"><span class="comment">// 创建仓库</span></span><br><span class="line"><span class="keyword">import</span> &#123; configureStore &#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仓库的数据来自于 reducer</span></span><br><span class="line"><span class="comment">// 注意，reducer 需要有一对 花括号 包裹</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123; reducer &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><h3 id="仓库引入">仓库引入</h3><p>在项目的全局入口文件 index.js 中，给顶级组件套一个 <code>Provider</code>，就可向组件共享数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App8&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入一个提供器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入仓库</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="comment">// 使用标签包括顶级组件，并共享数据</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="案例：在组件上获取到数据（state-映射）">案例：在组件上获取到数据（state 映射）</h3><p>要使用数据的组件（App8）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入连接器，连接提供器</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 props 接收</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App8</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>数字为 &#123;props.num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态映射：</span></span><br><span class="line">  <span class="comment">// 将 reducer 中的 state 映射成 props</span></span><br><span class="line">  <span class="comment">// 让开发者可以在组件中使用 props.num 去调用 state 中的 num</span></span><br><span class="line"><span class="comment">// 每一个映射都是一个函数</span></span><br><span class="line"><span class="comment">// 将 mapStateToProps 写在 connect 的第一个参数的位置，就会自动获取到一个参数 state</span></span><br><span class="line"><span class="comment">// 这个 state 就是 store/reducer.js 中 return 的 state </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">num</span>: state.<span class="property">num</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export default connect(state映射，dispatch映射)(当前组件名称)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">App8</span>);</span><br></pre></td></tr></table></figure><p>此时，页面上就会显示 num 的值</p><h3 id="案例：点击按钮让-reducer-js-中的-num-加-1（dispatch-映射）">案例：点击按钮让 reducer.js 中的 num 加 1（dispatch 映射）</h3><p>事件派发映射</p><p>组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入连接器，连接提供器</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 props 接收</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App8</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>数字为 &#123;props.num&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 调用事件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> props.addNum()&#125;&gt;累加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">num</span>: state.<span class="property">num</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件派发映射：将 reducer 中的事件映射成 props</span></span><br><span class="line"><span class="comment">// 让开发者可以在组件中使用 props.addNum() 实现 num 的累加</span></span><br><span class="line"><span class="comment">// 和 mapStateToProps 同理，当 mapDispatchToProps 写在 connect 的第二个参数位置，</span></span><br><span class="line"><span class="comment">// 就会被分配一个形参 dispatch </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">addNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// type 这个名称也是约定俗成，官网也是这么写的</span></span><br><span class="line">      <span class="keyword">const</span> action = &#123;<span class="attr">type</span>: <span class="string">&#x27;leijia&#x27;</span>&#125;</span><br><span class="line">      <span class="comment">// 这里的 action 会传递到 reducer 的 action</span></span><br><span class="line">      <span class="title function_">dispatch</span>(action)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export default connect(state映射，dispatch映射)(当前组件名称)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">App8</span>);</span><br></pre></td></tr></table></figure><p>reducer.js 中，导出的函数还有第二个形参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建仓库的初始状态</span></span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里还有第二个参数 action，是一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 深拷贝，直接修改 state 不生效</span></span><br><span class="line">    <span class="keyword">let</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">    <span class="comment">// 官网建议我们使用 switch-case 的形式，在 action 传值那里有例子</span></span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;leijia&#x27;</span>) &#123;</span><br><span class="line">        newState.<span class="property">num</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：action-传值">案例：action 传值</h3><p>我们现在想要实现一个效果，num 每次增加一个固定值，这个值由组件来决定</p><p>组件需要修改的地方：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">addNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 这里可以再给 action 定义别的属性，比如 value</span></span><br><span class="line">      <span class="keyword">const</span> action = &#123;<span class="attr">type</span>: <span class="string">&#x27;leijia&#x27;</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;</span><br><span class="line">      <span class="title function_">dispatch</span>(action)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里还有第二个参数 action，是一个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state))</span><br><span class="line">    <span class="comment">// 使用 switch-case</span></span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> (<span class="string">&#x27;leijia&#x27;</span>): &#123;</span><br><span class="line">            <span class="comment">// 从 action 中获取值</span></span><br><span class="line">            newState.<span class="property">num</span> += action.<span class="property">value</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由">路由</h2><p>路由的版本非常重要，一定要选对。假设你忘记了如何进行路由传参，在网上直接百度，可能由于路由版本不同，你试了也没效果。再过几个月，可能又换新版本了。</p><p>官网：<a href="https://reactrouter.com/en/main/start/tutorial">https://reactrouter.com/en/main/start/tutorial</a></p><h3 id="安装-2">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom localforage match-sorter sort-by</span><br></pre></td></tr></table></figure><h3 id="快速上手">快速上手</h3><p>初始化几个组件</p><p>pages/Detail.jsx、pages/Home.jsx、pages/List.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>首页Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局入口 index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App9&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>路由本质也是一个组件，可以写 jsx 后缀</p><p>新建 router/index.jsx，在其中引入刚才写好的组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/List&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;../App9&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Route</span>, <span class="title class_">Routes</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">BaseRouter</span> = (<span class="params"></span>) =&gt; <span class="comment">/* &#123;</span></span><br><span class="line"><span class="comment">    return ( */</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 注意 element 中的 App 要写成标签形式，不是直接一个 App */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">App</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/list&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">List</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/detail&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Detail</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="comment">/*     )</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BaseRouter</span>;</span><br></pre></td></tr></table></figure><p>react-router-dom 中有两种模式：</p><ul><li><p>History 模式：地址栏不带 # 号，需要配置 nginx（<strong>BrowserRouter</strong>）</p></li><li><p>Hash 模式：地址栏带 # 号，打包后可以直接放到线上（<strong>HashRouter</strong>）</p></li></ul><p>全局入口文件 index.js 引入写好的 router/index.jsx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="comment">// import App from &#x27;./App9&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">    <span class="comment">// &lt;App /&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span> /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 顶级组件中，指定子路由显示的位置：<code>&lt;Outlet /&gt;</code> （vue 指定路由显示的位置：<code>router-view</code> 标签）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>App9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>Link</code> 标签替代 <code>a</code> 标签（vue 中是 <code>router-link</code>）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* to=&#x27;/home&#x27; 没有花括号，也是可以的 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">home</span>&#x27;&#125;&gt;</span>主页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">List</span>&#x27;&#125;&gt;</span>列表页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">Detail</span>&#x27;&#125;&gt;</span>详情页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>App9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20230107150728914.png" alt="image-20230107150728914" style="zoom:67%;" /><h3 id="路由跳转携带参数">路由跳转携带参数</h3><p>前两种见 <a href="#jump4">useParams</a> 和 <a href="#jump5">useSearchParams</a> 这两个钩子</p><h4 id="使用事件跳转">使用事件跳转</h4><p>当我们想要携带多个参数跳转，前两种方式就比较麻烦。</p><p>App 组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">&#x27;/detail&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 使用 state 携带数据</span></span><br><span class="line">      <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;songxiao&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toDetail&#125;</span>&gt;</span>跳转到详情页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>App9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Detail 组件</p><p><strong>使用的是 useLocation 钩子</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户名：&#123;location.state?.username&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们点击按钮，就可以跳转到 Detail 组件，并携带数据</p><h3 id="404-路由匹配">404 路由匹配</h3><p>Error 组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ErrorImg</span> <span class="keyword">from</span> <span class="string">&#x27;../assets/404.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Error</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;ErrorImg&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router/index.jsx 中，如果想要整个页面显示 404 组件，那么就需要与 App 同级</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Routes</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">App</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/list/:id&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">List</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/detail&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Detail</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line">    &#123;<span class="comment">/* 与 App 组件同级 */</span>&#125;</span><br><span class="line">    &lt;<span class="title class_">Route</span> path=<span class="string">&#x27;*&#x27;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">Error</span> /&gt;</span></span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br><span class="line">&lt;/<span class="title class_">Routes</span>&gt;</span><br></pre></td></tr></table></figure><p>当我们访问一个不存在的 URL，比如 <code>localhost:3000/hello</code> ，就会跳转到 404 页面</p><h2 id="React-Router-Hooks">React Router Hooks</h2><h3 id="useLocation">useLocation</h3><p>在 App 组件中获取当前页面的路径</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入 useLocation</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, <span class="title class_">Link</span>, useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> location = <span class="title function_">useLocation</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(location);<span class="comment">// &#123;pathname: &#x27;/home&#x27;, search: &#x27;&#x27;, hash: &#x27;&#x27;, state: null, key: &#x27;default&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">pathname</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">home</span>&#x27;&#125;&gt;</span>主页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>App9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useNavigate">useNavigate</h3><p>如果我们<strong>使用事件的形式</strong>来跳转页面，可以使用 useNavigate 这个钩子。</p><p>案例：点击按钮，跳转到详情页</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, <span class="title class_">Link</span>, useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>();</span><br><span class="line">  <span class="comment">// 点击事件</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toDetail</span> = (<span class="params"></span>) =&gt; <span class="title function_">navigate</span>(<span class="string">&#x27;/detail&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toDetail&#125;</span>&gt;</span>跳转到详情页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>App9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="span-id-jump4-useParams-span"><span id='jump4'>useParams</span></h3><p>当我们想要跳转到某个页面并<strong>携带参数</strong>时，可以使用 useParams 钩子。</p><p>App 组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Outlet</span>, <span class="title class_">Link</span>, useNavigate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App9</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 携带参数 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">List</span>/<span class="attr">123</span>&#x27;&#125;&gt;</span>列表页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>App9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router/index.jsx 中，需要修改一下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&#x27;/list/:id&#x27;</span> element=&#123;<span class="language-xml"><span class="tag">&lt;<span class="name">List</span> /&gt;</span></span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><p>在 List 组件中获取传递的参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useParams&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">List</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// useParams() 返回一个对象，解构出来</span></span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = <span class="title function_">useParams</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>列表页List - &#123;id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="span-id-jump5-useSearchParams-span"><span id='jump5'>useSearchParams</span></h3><p>使用问号的形式<strong>携带参数</strong>（我们产生了疑问（问号），就要搜索（Search）=&gt; 使用的是 useSearchParams 而不是 useParams）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>&#x27;/<span class="attr">Detail</span>/?<span class="attr">id</span>=<span class="string">456&amp;tag</span>=<span class="string">唱&amp;tag</span>=<span class="string">跳&amp;tag</span>=<span class="string">rap&amp;tag</span>=<span class="string">篮球</span>&#x27;&#125;&gt;</span>详情页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>Detail 组件中</p><p>如果传递的是单个，使用 <code>get()</code> 获取</p><p>如果传递的是多个值（例如多选框），使用 <code>getAll()</code> 获取</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useSearchParams &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Detail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchParams] = <span class="title function_">useSearchParams</span>();</span><br><span class="line">  <span class="comment">// 获取单个</span></span><br><span class="line">  <span class="keyword">let</span> id = searchParams.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">  <span class="comment">// 获取多个</span></span><br><span class="line">  <span class="keyword">let</span> tag = searchParams.<span class="title function_">getAll</span>(<span class="string">&#x27;tag&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>详情页Detail - &#123;id&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;</span></span><br><span class="line"><span class="language-xml">          tag.map((item, index) =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20230107161037033.png" alt="image-20230107161037033" style="zoom: 67%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;React 快速入门&lt;/h1&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1tY411G7UP&quot;&gt;https://www.bilibili.com/video/BV1tY411G7UP&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
    <category term="编程学习" scheme="https://www.fomal.cc/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="知识分享" scheme="https://www.fomal.cc/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    
    <category term="前端" scheme="https://www.fomal.cc/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="https://www.fomal.cc/posts/397c083a.html"/>
    <id>https://www.fomal.cc/posts/397c083a.html</id>
    <published>2023-12-23T14:25:07.322Z</published>
    <updated>2023-12-23T14:25:07.322Z</updated>
    
    <content type="html"><![CDATA[<h1>函数式接口</h1><p>如果一个接口中，只声明了一个<strong>抽象方法</strong>，则此接口就称为函数式接口</p><p>@FunctionalInterface：显式地声明一下，类似于 @Overwrite，可以做一个验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span><span class="comment">//@since 1.8</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式接口的理解">函数式接口的理解</h2><p>Java 从诞生日起就是一直倡导“一切皆对象”，在 Java 里面面向对象 (OOP) 编程是一切。但是随着python、scala 等语言的兴起和新技术的挑战，Java 不得不做出调整以便支持更加广泛的技术要求，也即 java 不但可以支持 OOP 还可以支持 OOF (面向函数编程)</p><p>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在 Java8中有所不同。在 Java8 中，Lambda 表达式是对象，而不是函数，它们必须依附于一类特别的对象类型一函数式接口。</p><p>简单的说，在 Java8 中，Lambda 表达式就是一个函数式接口的实例。这就是 Lambda 表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口的实例，那么该对象就可以用 Lambda 表达式来表示。</p><p>Lambda 表达式可以<span style="color: red; font-weight: bold;">替换</span>之前的匿名内部类。</p><h2 id="Java-内置的四个核心函数式接口">Java 内置的四个核心函数式接口</h2><p>在 java.util.function 包下，定义了很多的函数式接口。</p><p>在我们想写一些接口的时候，如果和下面几个类型的接口总体是一样的，就可以直接使用这些接口。</p><p>当我们在开发中见到这几个接口的时候，实例化可以使用 lambda 表达式。</p><p>消费型接口：接收一个参数，但是没有返回值</p><p>供给型接口：没有给参数，但是有返回值</p><p>函数型接口：接收一个参数（自变量），返回一个值（因变量）</p><p>断定型接口：接收一个参数，返回一个布尔值</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20220715211402078.png" alt="image-20220715211402078"></p><p>引申出来的子接口：</p><p>接收参数和返回参数类型一样、接收一个参数变成可以接收两个参数…</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20220716173821379.png" alt="image-20220716173821379"></p><p><strong>示例</strong>：Consumer 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用匿名内部类</span></span><br><span class="line">    happyTime(<span class="number">500.53</span>, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Double&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Double money)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;去食堂买了瓶水，价格为&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 使用 lambda 表达式</span></span><br><span class="line">    happyTime(<span class="number">500.53</span>, money -&gt; System.out.println(<span class="string">&quot;去食堂买了瓶水，价格为&quot;</span> + money + <span class="string">&quot;元&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyTime</span><span class="params">(Double money, Consumer&lt;Double&gt; con)</span> &#123;</span><br><span class="line">    con.accept(money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><ul><li>“去食堂买了瓶水，价格为500.53元”</li></ul><p>分析：</p><ul><li><p>在 测试方法 test01 中，调用了 happyTime 方法，happyTime 方法中又调用了 accept 方法。</p></li><li><p>happyTime 方法其中有个参数是 Consumer 接口，调用的时候，使用匿名内部类实现该接口，重写了 Consumer 接口中的 accept 方法，输出一个字符串。</p></li><li><p>由于动态绑定机制，happyTime 的参数 con 就是匿名内部类，调用的 accept 方法就是匿名内部类中重写的方法。</p></li></ul><p><strong>示例</strong>：Predicate 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;天津&quot;</span>, <span class="string">&quot;西京&quot;</span>, <span class="string">&quot;普京&quot;</span>, <span class="string">&quot;东京&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用匿名内部类</span></span><br><span class="line">    List&lt;String&gt; filterList = filterString(list, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 使用 lambda 表达式</span></span><br><span class="line">    List&lt;String&gt; filterListt = filterString(list, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    System.out.println(filterList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定的规则，过滤集合中的字符串，此规则由 Predicate 的方法决定</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">filterString</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; pre)</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; filterList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre.test(s)) &#123;</span><br><span class="line">            filterList.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filterList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><ul><li>[北京, 西京, 普京, 东京]</li></ul><h1>Lambda 表达式</h1><p>Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使 Java 的语言表达能力得到了提升。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 匿名内部类</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compare1</span> <span class="operator">=</span> com1.compare(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(compare1);</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = ((o1, o2) -&gt; Integer.compare(o1, o2));</span><br><span class="line">    <span class="type">int</span> <span class="variable">compare2</span> <span class="operator">=</span> com2.compare(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(compare2);</span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; com3 = Integer::compare;</span><br><span class="line">    <span class="type">int</span> <span class="variable">compare3</span> <span class="operator">=</span> com3.compare(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    System.out.println(compare3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式的使用">Lambda表达式的使用</h2><ul><li><p>1.举例：</p><p>(o1,o2)-&gt;Integer.compare(o1,o2)</p></li><li><p>2.格式：</p><p>-&gt;：Lambda 操作符或箭头操作符</p><p>左边：Lambda形参列表（ 其实就是接口中的抽象方法的形参列表 ）</p><p>右边：Lambda体（ 其实就是重写的抽象方法的方法体 ）</p></li><li><p>Lambda表达式的本质：作为<span style="color: red; font-weight: bold;">函数式接口</span>的实例（ 实现类的对象实例 ）；要想使用 Lambda 表达式，一定要使用函数式接口</p></li></ul><p><strong>语法格式一</strong>：无参，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello, lambda&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    r1.run();<span class="comment">// 只是普通的调用方法，不是多线程</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Runnable r2 = () -&gt; &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;hello, lambdaaa&quot;);</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 大括号可以省略</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello, lambdaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    r2.run();<span class="comment">// 只是普通的调用方法，不是多线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语法格式二</strong>：Lambda 需要一个参数，但是没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; con = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    con.accept(<span class="string">&quot;谎言和誓言的区别是什么？&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;****************&quot;</span>);</span><br><span class="line">    Consumer&lt;String&gt; con1 = (String s) -&gt; &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;;</span><br><span class="line">    con1.accept(<span class="string">&quot;一个是听得人当真了，一个是说的人当真了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语法格式三</strong>：数据类型可以省略，因为可由编泽器推断得出，称为：类型推断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con1 = (s) -&gt; &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类似于泛型中的类型推断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 这也是类型推断</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>语法格式四</strong>：Lambda 若只需要一个参数时，参数的小括号可以省略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con1 = s -&gt; &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>语法格式五</strong>：Lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123;</span><br><span class="line">    System.out.println(o1);</span><br><span class="line">    System.out.println(o2);</span><br><span class="line">    <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>语法格式六</strong>：Lambda 体只有一条语句时，return 与大括号若有，都可以省略（如果省略了大括号，return 必须省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//////////////////////////////</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>左边：Lambda 形参列表的参数类型可以省略（类型推断）如果 Lambda 形参列表只有一个参数，其一对（）也可以省略</p><p>右边：Lambda 体应该使用一对 {} 包裹；如果 Lambda 体只有一条执行语句（可能是 return 语句），可以省略这一对 {} 和 return 关键字</p><p><strong>写 lambda 表达式的时候，要知道抽象方法长什么样！</strong></p><ul><li>一&gt; 左边就是抽象方法的形参</li><li>一&gt; 右边就是抽象方法的方法体</li></ul><h1>方法引用</h1><p>方法引用是 lambda 表达式的深层次表达。通过方法的名字来指向一个方法，可以认为是 Lambda 表达式的一个语法糖。</p><p>换句话说，方法引用就是 Lambda 表达式，也就是函数式接口的一个实例。</p><p><strong>使用情境：</strong></p><p>当<strong>要传递给 lambda 体的操作</strong>，已经<strong>有别的方法实现了</strong>，可以使用方法引用。</p><p><span style="color: red; font-weight: bold;">换句话说，就是系统写好的方法或者我们自己写的方法，操作和 lambda 体中要进行的操作是一样的，就直接把写好的方法拿过来用不就行了。</span></p><p><strong>使用要求：</strong></p><p>对于情况一和情况二，要求接口中的 抽象方法的形参列表 和 返回值类型与方法引用的方法的形参列表 和返回值类型相同（或者是其子类型）。<span style="color: red; font-weight: bold;">这就是方法引用只要写方法名，无需关注方法的参数列表的原因</span>。</p><p><strong>使用格式：</strong></p><p>类（或对象）: : 方法名，参数列表都不用写了。具体来说可分为三种</p><ul><li>对象<strong>实例</strong> : : 非静态方法（对象实例 : : 静态方法是错的）</li><li>类 : : 静态方法</li><li>类 : : 非静态方法 ( <strong>比较难想到要引用的方法，需要对各种方法非常熟悉</strong> )</li></ul><p>注：和之前学的静态方法调用是反过来的！</p><ul><li>之前，类只能调用静态方法，对象可以调用静态 / 非静态方法</li></ul><p><strong>示例：</strong></p><ul><li>情况一：<strong>对象实例</strong> : : 非静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Consumer 中的 void accept(T t)</span></span><br><span class="line"><span class="comment">// PrintStream 中的 void println(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Consumer&lt;String&gt; con1 = s -&gt; System.out.println(s);</span><br><span class="line">    con1.accept(<span class="string">&quot;hello~&quot;</span>); <span class="comment">// 输出 hello~</span></span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">    Consumer&lt;String&gt; con2 = ps::println; <span class="comment">// System.out::println</span></span><br><span class="line">    con2.accept(<span class="string">&quot;method~&quot;</span>); <span class="comment">// 输出 method~</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Supplier 中的 T get()</span></span><br><span class="line"><span class="comment">// Employee 中的 String getName()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Codd&quot;</span>);</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Supplier&lt;String&gt; sup1 = () -&gt; emp.getName();</span><br><span class="line">    System.out.println(sup1.get()); <span class="comment">// 输出 Codd</span></span><br><span class="line">    <span class="comment">// 使用 方法引用</span></span><br><span class="line">    Supplier&lt;String&gt; sup2 = emp::getName;</span><br><span class="line">    System.out.println(sup2.get()); <span class="comment">// 输出 Codd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Employee 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>情况二：类 : : 静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparator 中的 int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">// Integer 中的 int compare(T t1,T t2)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; com1 = (t1, t2) -&gt; Integer.compare(t1, t2);</span><br><span class="line">    System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>)); <span class="comment">// -1</span></span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; com2 = Integer::compare;</span><br><span class="line">    System.out.println(com2.compare(<span class="number">21</span>, <span class="number">21</span>)); <span class="comment">// 0</span></span><br><span class="line">    <span class="comment">// 还能这么写，这是第三种情况</span></span><br><span class="line">    Comparator&lt;Integer&gt; com3 = Integer::compareTo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function 中的 R apply(T t)</span></span><br><span class="line"><span class="comment">// Math 中的 Long round(Double d)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Function&lt;Double, Long&gt; fun1 = t -&gt; Math.round(t);</span><br><span class="line">    System.out.println(fun1.apply(<span class="number">12.3</span>)); <span class="comment">// 12 </span></span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    Function&lt;Double, Long&gt; fun2 = Math::round;</span><br><span class="line">    System.out.println(fun2.apply(<span class="number">12.6</span>)); <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>情况三：类 : : 非静态方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Comparator 中的 int compare(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String 中的 int t1.compareTo(t2)</span></span><br><span class="line"><span class="comment">// 要实现的抽象方法有两个参数，第一个参数作为要引用的方法的调用者</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Comparator&lt;String&gt; com1 = (t1, t2) -&gt; t1.compareTo(t2);</span><br><span class="line">    System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>)); <span class="comment">// -1</span></span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    Comparator&lt;String&gt; com2 = String::compareTo;</span><br><span class="line">    System.out.println(com2.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abe&quot;</span>)); <span class="comment">// -2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BiPredicate 中的 boolean test(T t1,T t2)</span></span><br><span class="line"><span class="comment">// String 中的 boolean t1.equals(t2)</span></span><br><span class="line"><span class="comment">// 要实现的抽象方法有两个参数，第一个参数作为要引用的方法的调用者</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    BiPredicate&lt;String, String&gt; pre1 = (t1, t2) -&gt; t1.equals(t2);</span><br><span class="line">    System.out.println(pre1.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    BiPredicate&lt;String, String&gt; pre2 = String::equals;</span><br><span class="line">    System.out.println(pre2.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function 中的 R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee 中的 String t.getName()</span></span><br><span class="line"><span class="comment">// 要实现的抽象方法有一个参数，作为要引用的方法的调用者，在这里这个 t 就是 Employee 类的对象实例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Function&lt;Employee, String&gt; fun1 = emp -&gt; emp.getName();</span><br><span class="line">    System.out.println(fun1.apply(employee)); <span class="comment">// Jerry</span></span><br><span class="line">    <span class="comment">// 方法引用</span></span><br><span class="line">    Function&lt;Employee, String&gt; fun2 = Employee::getName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>构造器引用</h1><p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致，抽象方法的返回类型即为构造器创建的对象的类型</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Supplier 中的 T get()</span></span><br><span class="line"><span class="comment">// Employee 的无参构造器 Employee(), 可以看做返回了一个 Employee 的实例</span></span><br><span class="line"><span class="comment">// 即两者类型相似，因此可以使用方法引用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Supplier&lt;Employee&gt; sup1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    <span class="comment">// 构造器引用</span></span><br><span class="line">    Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> sup2.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function 中的 R apply(T t)</span></span><br><span class="line"><span class="comment">// Employee 的单参构造器 Employee(String name)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Function&lt;String, Employee&gt; fun1 = name -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(name);</span><br><span class="line">    <span class="comment">// 构造器引用</span></span><br><span class="line">    Function&lt;String, Employee&gt; fun2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> fun2.apply(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BiFunction 中的 R apply(T t,U u)</span></span><br><span class="line"><span class="comment">// Employee 构造器 Employee(String name, int age)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    BiFunction&lt;String, Integer, Employee&gt; fun1 = (name, age) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(name, age);</span><br><span class="line">    <span class="comment">// 构造器引用</span></span><br><span class="line">    BiFunction&lt;String, Integer, Employee&gt; fun2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> fun2.apply(<span class="string">&quot;Codd&quot;</span>, <span class="number">99</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><p>问：如果有两个单参数 int 类型的构造器，如何判断引用的是哪一个构造器？？？</p><p>有两个单参数的 int  类型的构造器已经不满足构造器重载了，会直接报错。</p></li></ul><img src = "https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20220717213846913.png" width = "70%"/><ul><li><p>如何决定构造器是哪一个？</p><p>前面指定的泛型就可以确定是使用哪一个构造器。如：当有多个单参的构造器时，就会就通过前面指定的泛型来进行区分。</p></li></ul><h1>数组引用</h1><p>数组引用可以看成特殊的构造器引用。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function 中的 R apply(T t)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个数组，Integer 指定返回数组长度，String 指定返回数组的类型</span></span><br><span class="line">    <span class="comment">// lambda 表达式</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; fun1 = length -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    <span class="comment">// 数组引用</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; fun2 = String[]::<span class="keyword">new</span>;</span><br><span class="line">    String[] arr = fun2.apply(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Stream API</h1><p>Stream API ( java.util.stream ) 把真正的<strong>函数式编程风格</strong>引入到 Java 中，是目前为止对 java 类库最好的补充，因为 Stream API 可以极大提高 java 程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><p>使用 Stream API 对集合数据进行操作，就类似于使用 SQL 对表中数据进行查询。</p><h3 id="为什么要使用">为什么要使用?</h3><p>对于关系型数据库（如 MySQL，Oracle），当查询数据时，如果带有筛选条件，可以直接在 SQL 上增加过滤条件（如 where），这样从数据库查询出来的数据就是筛选之后的数据了，后端只需把这些数据返回给前端就行。（<strong>过滤操作在 SQL 语言层面进行）</strong></p><p>对于非关系型数据库（如 MongDB，Redis），查询数据如果带有过滤条件，需要在 Java 层面对查询出来的数据进行处理，这就需要 Stream API。（<strong>过滤操作在  Java 层面进行</strong>）</p><h3 id="Stream-和-Collection-的区别？">Stream 和 Collection 的区别？</h3><ul><li><p><strong>Collection 与数据有关</strong>，是内存层面的容器，用来存储多个数据，<strong>面向内存</strong>，存储在内存中</p></li><li><p><strong>Steam 与计算有关</strong>，用来操作容器中数据（一系列的中间操作：过滤、映射、归约、排序等），<strong>面向 CPU</strong>，通过 CPU 实现计算</p></li></ul><h3 id="注意">注意</h3><ul><li><p>Stream 自己不会存储元素。和迭代器一样，迭代器本身不存储数据，数据存储在集合中。</p></li><li><p>Stream 不会改变源对象。相反，他们会返回一个持有结果的新 Stream。（和 String 一样，不变性）</p></li><li><p>Stream 作是延迟执行的。这意味着他们会等到需要结果的时候才执行。<strong>只要不调用终止操作，一系列的中间操作都不会执行。一旦调用了终止操作，就不能再调用中间操作了。</strong></p></li></ul><h2 id="Stream-操作的三个步骤">Stream 操作的三个步骤</h2><ul><li><p>创建 Stream</p><p>一个数据源（如：集合、数组），获取一个流</p></li><li><p>中间操作</p><p>一个<strong>中间操作链</strong>，对数据源的数据进行处理</p></li><li><p>终止操作</p><p>一旦执行终止操作，就（才）执行中间操作链，并产生结果。之后，不会再被使用。（<strong>要想再次使用 Steam，需要重新创建一个 Steam，否则会报错</strong>）</p></li></ul><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1307/image-20220718140042483.png" alt="image-20220718140042483"></p><h3 id="1-创建-Steam">1. 创建 Steam</h3><p>创建 Steam 有四种方式。</p><h4 id="1）通过-Collection-接口中的默认方法">1）通过 Collection 接口中的默认方法</h4><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法。</p><ul><li><p>default Stream<E>stream()：返回一个顺序流</p></li><li><p>default Stream<E>parallelStream()：返回一个并行流</p></li></ul><p><strong>并行流：</strong>（list 是有序的）并行流相当于同时有多个线程去集合中取数据，顺序就不一定是 list 中顺序了。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line">Stream&lt;Employee&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure><h4 id="2）通过数组">2）通过数组</h4><ul><li>static <T> Stream <T> stream(T[] array)：返回一个流</li></ul><p>重载形式，处理对应类型的数组：</p><ul><li>public static IntStream stream(int[] array）</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">IntStream</span> <span class="variable">stream</span> <span class="operator">=</span> Arrays.stream(arr);</span><br><span class="line"><span class="comment">// 指定泛型</span></span><br><span class="line">Employee[] employees = <span class="keyword">new</span> <span class="title class_">Employee</span>[<span class="number">2</span>];</span><br><span class="line">Stream&lt;Employee&gt; employeeStream = Arrays.stream(employees);</span><br></pre></td></tr></table></figure><h4 id="3）通过-Stream-的-of">3）通过 Stream 的 of()</h4><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里放的是包装类，不是基本数据类型</span></span><br><span class="line">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"><span class="type">Employee</span> <span class="variable">e3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">Stream&lt;Employee&gt; employeeStream = Stream.of(e1, e2, e3);</span><br></pre></td></tr></table></figure><h4 id="4）创建无限流">4）创建无限流</h4><ul><li><p>无限流可以帮我们造数据。</p></li><li><p>可以使用静态方法 Stream.iterate() 和 Stream.generate() 创建无限流。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 0 开始，输出前十个偶数</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, t -&gt; t + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 产生十个随机数</span></span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="2-中间操作">2. 中间操作</h3><p>中间操作就像一条流水线。这条流水线除非触发终止操作，否则不会执行任何处理。</p><h4 id="1）筛选与切片">1）筛选与切片</h4><ul><li>filter(Predicate p)：接收 Lambda，从流中排除某些元素</li><li>limit(long maxSize)：截断流，使其元素不超过给定数量，返回 n 个元素的流</li><li>skip(long n)：跳过前 n 个元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个<strong>空流</strong>（都跳过了，啥也没有）。<strong>与 limit(n) 互补</strong>。</li><li>distinct()：筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Employee&gt; list = Employee.getEmployees();</span><br><span class="line">    <span class="comment">// filter</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = list.stream();</span><br><span class="line">    <span class="comment">// 查询员工表中薪资大于 30000 的员工信息</span></span><br><span class="line">    stream.filter(employee -&gt; employee.getSalary() &gt; <span class="number">30000</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    <span class="comment">// limit</span></span><br><span class="line">    <span class="comment">// 查询前三条员工信息</span></span><br><span class="line">    list.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    <span class="comment">// 跳过前三条员工信息</span></span><br><span class="line">    list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    <span class="comment">// distinct</span></span><br><span class="line">    <span class="comment">// 查出所有员工信息，并去除重复元素</span></span><br><span class="line">    <span class="comment">// Employee 中已经重写了 equal 和 hashCode 方法</span></span><br><span class="line">    list.stream().distinct().forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getEmployees 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Employee&gt; <span class="title function_">getEmployees</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>, <span class="number">30000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;Tyler&quot;</span>, <span class="number">13</span>, <span class="number">30000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">11</span>, <span class="number">50000</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;Codd&quot;</span>, <span class="number">29</span>, <span class="number">50000</span>));</span><br><span class="line">    <span class="comment">// 插入一条重复数据</span></span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">11</span>, <span class="number">50000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出信息：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Employee&#123;eid=<span class="number">1003</span>, name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">11</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1004</span>, name=<span class="string">&#x27;Codd&#x27;</span>, age=<span class="number">29</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1003</span>, name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">11</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">===================================</span><br><span class="line">Employee&#123;eid=<span class="number">1001</span>, name=<span class="string">&#x27;Tom&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">30000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1002</span>, name=<span class="string">&#x27;Tyler&#x27;</span>, age=<span class="number">13</span>, salary=<span class="number">30000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1003</span>, name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">11</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">===================================</span><br><span class="line">Employee&#123;eid=<span class="number">1004</span>, name=<span class="string">&#x27;Codd&#x27;</span>, age=<span class="number">29</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1003</span>, name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">11</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">===================================</span><br><span class="line">Employee&#123;eid=<span class="number">1001</span>, name=<span class="string">&#x27;Tom&#x27;</span>, age=<span class="number">12</span>, salary=<span class="number">30000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1002</span>, name=<span class="string">&#x27;Tyler&#x27;</span>, age=<span class="number">13</span>, salary=<span class="number">30000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1003</span>, name=<span class="string">&#x27;Jerry&#x27;</span>, age=<span class="number">11</span>, salary=<span class="number">50000.0</span>&#125;</span><br><span class="line">Employee&#123;eid=<span class="number">1004</span>, name=<span class="string">&#x27;Codd&#x27;</span>, age=<span class="number">29</span>, salary=<span class="number">50000.0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2）映射">2）映射</h4><ul><li><p>map(Function f)：接收一个函数作为参数，将元素转换成其他形式或提取信息。该函数会被<strong>应用到每个元素上</strong>，并将其映射成一个新的元素。</p></li><li><p>flatMap(Function f)：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p></li></ul><p><strong>map 使用示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    <span class="comment">// 1. 把所有元素变成大写</span></span><br><span class="line">    list.stream().map(s -&gt; s.toUpperCase()).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    <span class="comment">// 2. 获取员工名字长度大于 4 的员工姓名</span></span><br><span class="line">    List&lt;Employee&gt; employees = Employee.getEmployees();</span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    <span class="comment">// 获得由员工姓名组成的流对象</span></span><br><span class="line">    Stream&lt;String&gt; nameStream = stream.map(Employee::getName);</span><br><span class="line">    nameStream.filter(name -&gt; name.length() &gt; <span class="number">4</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>map 和 flatMap 的区别：</strong></p><p>两者的区别就像 list 中的 add 和 addAll 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list1.add(<span class="number">1</span>);</span><br><span class="line">list1.add(<span class="number">2</span>);</span><br><span class="line">list1.add(<span class="number">3</span>);</span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list1.add(list2); <span class="comment">// list1 中有4个元素，list2 作为一整个元素加入 list1 中</span></span><br><span class="line">list1.addAll(list2); <span class="comment">// list1 中有6个元素，每个元素都被单独取出加入 list1 中</span></span><br></pre></td></tr></table></figure><p>map 中如果有流，就会把整个流当成一个元素</p><p>flatMap 中如果有流，会把流打散，取出流中的每一个元素作为一个一个新的元素</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>);</span><br><span class="line">    <span class="comment">// map 会对集合中的每个元素进行操作,每个元素都调用 fromStingToStream</span></span><br><span class="line">    <span class="comment">// streamStream 就是一个流里面的元素还是流，也就是说 streamStream 中有四个流对象 &#123;a a&#125; &#123;b b&#125; &#123;c c&#125; &#123;d d&#125;</span></span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream().map(str -&gt; fromStingToStream(str));</span><br><span class="line">    <span class="comment">// 如果想要取出每个元素查看，需要两层 forEach</span></span><br><span class="line">    streamStream.forEach(stream -&gt; stream.forEach(System.out::println)); <span class="comment">// a a b b c c d d</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 flatMap</span></span><br><span class="line">    <span class="comment">// 这里获得的流对象，每一个元素都是 character</span></span><br><span class="line">    Stream&lt;Character&gt; characterStream = list.stream().flatMap(str -&gt; fromStingToStream(str));</span><br><span class="line">    characterStream.forEach(System.out::println); <span class="comment">// a a b b c c d d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串中的多个字符构成的集合转换为对应 Stream 的实例</span></span><br><span class="line"><span class="keyword">public</span> Stream&lt;Character&gt; <span class="title function_">fromStingToStream</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character c : str.toCharArray()) &#123;</span><br><span class="line">        <span class="comment">// 如 str 为：&quot;Tom&quot;，则 list 中的元素有三个，T，o，m</span></span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）排序">3）排序</h4><p>java 中，和排序相关的接口有两个：Compare 和 Comparator</p><ul><li><p>sorted()：自然排序，需要实现 Compare 接口</p></li><li><p>sorted(Comparator com)：定制排序</p></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 自然排序，从小到大</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">12</span>, <span class="number">43</span>, -<span class="number">1</span>, <span class="number">34</span>, <span class="number">99</span>);</span><br><span class="line">    list.stream().sorted().forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 定制排序</span></span><br><span class="line">    List&lt;Employee&gt; employees = Employee.getEmployees();</span><br><span class="line">    <span class="comment">// 抛异常，原因：Employee 没有实现 Comparable 接口</span></span><br><span class="line">    <span class="comment">//employees.stream().sorted().forEach(System.out::println);</span></span><br><span class="line">    employees.stream().sorted((e1, e2) -&gt; &#123;</span><br><span class="line">        <span class="comment">// 按照年龄排序，如果年龄相同，按照薪水排序</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">compareValue</span> <span class="operator">=</span> Integer.compare(e1.getAge(), e2.getAge());</span><br><span class="line">        <span class="keyword">if</span> (compareValue != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> compareValue;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.compare(e1.getSalary(), e2.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-终止操作">3. 终止操作</h3><p>流进行了终止操作，不能再次使用。</p><p>终止操作会产生结果，可以是任何不是流的值，如 List，Integer，甚至是 void。</p><h4 id="1）匹配与查找">1）匹配与查找</h4><p>都是一些简单地 API。</p><ul><li><p>allMatch(Predicate p)：检香是否匹配所有元素</p></li><li><p>anyMatch(Predicate p)：检香是否至少匹配一个元素</p></li><li><p>noneMatch(Predicate p)：检查是否没有匹配的元素</p></li><li><p>findFirst()：返回第一个元素</p></li><li><p>findAny()：返回当前流中的任意元素。如果是顺序流（stream），会取第一个元素；如果是并行流（parallelStream），就是任意一个。</p></li><li><p>count()：返回流中元素的总个数</p></li><li><p>max(Comparator c)：返回流中最大值</p></li><li><p>min(Comparator c)：返回流中最小值</p></li><li><p>forEach(Consumer c)：内部迭代（使用 iterator 的方式称为外部迭代，就是说我们外部拿到 iterator 这个指针，用 iterator 遍历集合）</p></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = Employee.getEmployees();</span><br><span class="line"><span class="comment">// allMatch 是否所有员工的年龄都大于 18</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> employees.stream().map(Employee::getAge).allMatch(age -&gt; age &gt; <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 直接拿 Employee 操作也是可以的</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> employees.stream().allMatch(e -&gt; e.getAge() &gt; <span class="number">18</span>);</span><br><span class="line"><span class="comment">// anyMatch 是否存在员工的工资大于 10000</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> employees.stream().anyMatch(e -&gt; e.getSalary() &gt; <span class="number">10000</span>);</span><br><span class="line"><span class="comment">// noneMatch 查看是否有员工姓”雷“，没有则返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> employees.stream().noneMatch(e -&gt; e.getName().startsWith(<span class="string">&quot;雷&quot;</span>));</span><br><span class="line"><span class="comment">// findFirst</span></span><br><span class="line">Optional&lt;Employee&gt; first = employees.stream().findFirst();</span><br><span class="line"><span class="comment">// findAny</span></span><br><span class="line">Optional&lt;Employee&gt; any = employees.parallelStream().findAny();</span><br><span class="line"><span class="comment">// count</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> employees.stream().filter(e -&gt; e.getAge() &gt; <span class="number">18</span>).count();</span><br><span class="line"><span class="comment">// max 求最高的工资</span></span><br><span class="line">Optional&lt;Double&gt; maxSalary = employees.stream().map(Employee::getSalary).max(Double::compareTo);</span><br><span class="line"><span class="comment">// min 求最低工资的员工（注意和上面的区别）</span></span><br><span class="line">Optional&lt;Employee&gt; e = employees.stream().min((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));</span><br><span class="line"><span class="comment">// forEach 内部迭代</span></span><br><span class="line">employees.stream().forEach(System.out::println);</span><br><span class="line"><span class="comment">// 使用集合的遍历操作</span></span><br><span class="line">employees.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="2）归约">2）归约</h4><ul><li><p>reduce(T iden, BinaryOperator b)：可以将流中元素反复结合起来，得到一个值，返回 T。<strong>第一个参数相当于初始值，从初始值执行操作</strong>。</p></li><li><p>reduce(BinaryOperator b)：可以将流中元素反复结合起来，得到一个值，返回 Optional<T></p></li></ul><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它来进行网络搜索而出名。</p><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算 1-10 自然数的和</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum1</span> <span class="operator">=</span> Stream.iterate(<span class="number">1</span>, t -&gt; t + <span class="number">1</span>).limit(<span class="number">10</span>).reduce(<span class="number">0</span>, (n1, n2) -&gt; n1 + n2);</span><br><span class="line"><span class="comment">// 或者这样写</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum2</span> <span class="operator">=</span> Stream.iterate(<span class="number">1</span>, t -&gt; t + <span class="number">1</span>).limit(<span class="number">10</span>).reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">System.out.println(sum1 + <span class="string">&quot; &quot;</span> + sum2); <span class="comment">// 55</span></span><br><span class="line"><span class="comment">// 计算所有员工的工资总和</span></span><br><span class="line">List&lt;Employee&gt; list = Employee.getEmployees();</span><br><span class="line">Optional&lt;Double&gt; sumSalary1 = list.stream().map(Employee::getSalary).reduce(Double::sum);</span><br><span class="line"><span class="comment">// 或者这样写</span></span><br><span class="line">Optional&lt;Double&gt; sumSalary2 = list.stream().map(Employee::getSalary).reduce((s1, s2) -&gt; Double.sum(s1, s2));</span><br><span class="line">System.out.println(sumSalary1 + <span class="string">&quot; &quot;</span> + sumSalary2); </span><br></pre></td></tr></table></figure><h4 id="3）收集">3）收集</h4><ul><li><p>collect(Collector c)：将流转换为其他形式。用于给 Stream 中的元素做汇总</p></li><li><p>Collectors：收集者，提供了很多静态方法，如 toList，toSet，toCollection，可以方便地创建常见收集器实例</p></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询工资大于 30000 的员工，结果返回一个 List 或 Set</span></span><br><span class="line">List&lt;Employee&gt; list = Employee.getEmployees();</span><br><span class="line">List&lt;Employee&gt; filterList = list.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">30000</span>).collect(Collectors.toList());</span><br><span class="line">filterList.forEach(System.out::println);</span><br><span class="line">Set&lt;Employee&gt; filterSet = list.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">30000</span>).collect(Collectors.toSet());</span><br><span class="line">filterSet.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1>Optional 类</h1><p><strong>Optional 类是为了在程序中避免出现空指针而创建的。</strong></p><p>以前，为了解决空指针异常，Google 公司著名的 Guava 项目引入了 Optional 类，Guava 通过使用检查空值的方式来防止代码污染。受到 Google Guava 的启发，Optional 类已经成为 Java8 类库的一部分。</p><p>Optional<T>类（java.util.Optional）是一个容器类，它可以保存类型 T 的值（存储在该类的 value 成员变量中）。</p><h3 id="常用方法">常用方法</h3><p>Optional 提供很多有用的方法，这样我们就不用显式进行空值检测。</p><h4 id="创建Optional-类对象">创建Optional 类对象</h4><ul><li>Optional.of(T t)：创建一个 Optional 实例，<strong>t 必须非空</strong>，用处不大</li><li>Optional.empty()：创建一个空的 Optional 实例</li><li>Optional.ofNullable(T t)：<strong>t 可以为 null</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Optional&lt;Employee&gt; o1 = Optional.of(employee);</span><br><span class="line">System.out.println(o1);<span class="comment">// NullPointerException</span></span><br><span class="line">Optional&lt;Employee&gt; o2 = Optional.ofNullable(employee);</span><br><span class="line">System.out.println(o2); <span class="comment">// Optional.empty</span></span><br></pre></td></tr></table></figure><h3 id="举例说明-Optional-类处理空指针">举例说明 Optional 类处理空指针</h3><ul><li>orElse(T ohter)：如果有值则将其返回，否则返回指定的 other 对象，这样就保证了非空（鸡肋）</li></ul><p><strong>使用 if-else 处理空指针：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    getGirlName(boy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有处理空指针</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> boy.getGirl().getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单处理一下空指针</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (boy == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (boy.getGirl() == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> boy.getGirl().getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Optional 类处理空指针：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 正常情况</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;HiBoy&quot;</span>));</span><br><span class="line">    System.out.println(getGirlName(boy));</span><br><span class="line">    <span class="comment">// boy 为空</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    System.out.println(getGirlName(b1));<span class="comment">// HiGirl</span></span><br><span class="line">    <span class="comment">// girl 为空</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="literal">null</span>);</span><br><span class="line">    System.out.println(getGirlName(b2));<span class="comment">// HelloGirl</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    Optional&lt;Boy&gt; optionalBoy = Optional.ofNullable(boy);</span><br><span class="line">    <span class="comment">// 如果传进来的 boy 为空，b1 就是 orElse 中指定的，否则 b1 就是传进来的 boy</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">b1</span> <span class="operator">=</span> optionalBoy.orElse(<span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;HiGirl&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> b1.getGirl();</span><br><span class="line">    Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);</span><br><span class="line">    <span class="comment">// 如果 boy 不为空 而 girl 为空，g1 就是 orElse 中指定的</span></span><br><span class="line">    <span class="type">Girl</span> <span class="variable">g1</span> <span class="operator">=</span> optionalGirl.orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;HelloGirl&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> g1.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Optional 类中的 get() 方法，调用对象的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Double&gt; sumSalary2 = list.stream().map(Employee::getSalary).reduce((s1, s2) -&gt; Double.sum(s1, s2));</span><br><span class="line">System.out.println(sumSalary2.get());</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;函数式接口&lt;/h1&gt;
&lt;p&gt;如果一个接口中，只声明了一个&lt;strong&gt;抽象方法&lt;/strong&gt;，则此接口就称为函数式接口&lt;/p&gt;
&lt;p&gt;@FunctionalInterface：显式地声明一下，类似于 @Overwrite，可以做一个验证&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    
    <category term="编程学习" scheme="https://www.fomal.cc/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="后端" scheme="https://www.fomal.cc/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
